import React, { useEffect, useMemo, useState } from "react";
import styles from "./mainReport.module.scss";
// –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ–±—â–∏–π API helper ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
// import { API } from "../../api";

const API_BASE = "https://srezka.pythonanywhere.com"; // ‚Üê –ø–æ–ø—Ä–∞–≤—å –Ω–∞ –±–æ–µ–≤–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

// –§–æ–ª–ª–±–µ–∫-–æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é (–µ—Å–ª–∏ –Ω–µ—Ç API helper)
const api = {
  getSales: async () => {
    const r = await fetch(`${API_BASE}/clients/sales/`);
    return { data: await r.json() };
  },
  getStocks: async () => {
    const r = await fetch(`${API_BASE}/clients/stocks/`);
    return { data: await r.json() };
  },
  getTransactionsSummary: async () => {
    const r = await fetch(`${API_BASE}/clients/transactions/summary/`);
    return { data: await r.json() };
  },
};

const PERIODS = [
  { key: "today",   label: "–°–µ–≥–æ–¥–Ω—è" },
  { key: "7d",      label: "7 –¥–Ω–µ–π" },
  { key: "30d",     label: "30 –¥–Ω–µ–π" },
  { key: "month",   label: "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü" },
  { key: "custom",  label: "–°–≤–æ–π –ø–µ—Ä–∏–æ–¥" },
];

function startOfMonth(date = new Date()) {
  return new Date(date.getFullYear(), date.getMonth(), 1);
}

function fmtMoney(n) {
  const v = Number(n || 0);
  return v.toLocaleString("ru-RU", { maximumFractionDigits: 2 });
}

function inRange(iso, from, to) {
  if (!iso) return false;
  const d = new Date(iso);
  return (!from || d >= from) && (!to || d <= to);
}

export default function UnitEconomy() {
  const [loading, setLoading] = useState(true);
  const [sales, setSales] = useState([]);              // [{id, total, date, items:[{code,name,price,quantity,total}]}]
  const [stocks, setStocks] = useState([]);            // [{code | [code], price, price_seller, quantity, ...}]
  const [txSummary, setTxSummary] = useState({         // —Ç–≤–æ–π summary endpoint
    month: { added_today: 0 },
    daily_expense: 0,
    monthly_expense: 0,
  });

  // —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
  const [period, setPeriod] = useState("30d");
  const [from, setFrom]     = useState(null);
  const [to, setTo]         = useState(null);

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        const [s, st, t] = await Promise.all([
          // API ? API.getSales() : api.getSales(),
          api.getSales(),
          api.getStocks(),
          api.getTransactionsSummary(),
        ]);
        setSales(Array.isArray(s.data) ? s.data : []);
        setStocks(Array.isArray(st.data) ? st.data : []);
        setTxSummary(t.data || {});
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏:", e);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏");
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // –≤—ã—Å—á–∏—Ç–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–∞
  useEffect(() => {
    const now = new Date();
    if (period === "today") {
      const start = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      setFrom(start);
      setTo(new Date(start.getTime() + 24 * 3600 * 1000 - 1));
    } else if (period === "7d") {
      const start = new Date(now); start.setDate(now.getDate() - 6);
      setFrom(new Date(start.getFullYear(), start.getMonth(), start.getDate()));
      setTo(now);
    } else if (period === "30d") {
      const start = new Date(now); start.setDate(now.getDate() - 29);
      setFrom(new Date(start.getFullYear(), start.getMonth(), start.getDate()));
      setTo(now);
    } else if (period === "month") {
      const start = startOfMonth(now);
      setFrom(start);
      setTo(now);
    } else if (period === "custom") {
      // –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî —Ä—É–∫–∞–º–∏
    }
  }, [period]);

  // –∫–∞—Ä—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –ø–æ –∫–æ–¥—É
  const costByCode = useMemo(() => {
    const map = new Map();
    for (const s of stocks) {
      // code –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π "1,2" –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
      const codes = Array.isArray(s.code)
        ? s.code
        : (s.code || "").toString().split(",").map(x=>x.trim()).filter(Boolean);
      for (const c of codes) {
        // –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        map.set(c, Number(s.price_seller || 0));
      }
    }
    return map;
  }, [stocks]);

  // –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
  const filteredSales = useMemo(() => {
    if (!from && !to) return sales;
    return sales.filter(s => inRange(s.date, from, to));
  }, [sales, from, to]);

  // —Ä–∞—Å—á—ë—Ç—ã
  const calc = useMemo(() => {
    let orders = 0;
    let itemsCnt = 0;
    let revenue = 0;             // –≤—ã—Ä—É—á–∫–∞
    let servicesRevenue = 0;     // —É—Å–ª—É–≥–∏ (–µ—Å–ª–∏ –ø—Ä–æ–≤–æ–¥–∏—à—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
    let discounts = 0;           // —Å–∫–∏–¥–∫–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
    let cogs = 0;                // —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–æ Stock.price_seller)
    let returns = 0;             // –≤–æ–∑–≤—Ä–∞—Ç—ã (–µ—Å–ª–∏ –≤ items total < 0 –∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç)
    const productProfit = new Map(); // –ø–æ SKU: {name, revenue, cogs, profit, qty}

    for (const sale of filteredSales) {
      orders += 1;
      for (const it of sale.items || []) {
        const q = Number(it.quantity) || 0;
        const p = Number(it.price) || 0;
        const lineSum = q * p;

        // –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
        const isDiscount = p < 0 || String(it.code).toUpperCase() === "DISCOUNT";
        const isService  = String(it.code).toUpperCase() === "SERVICE";

        itemsCnt += q;
        revenue += lineSum;

        if (isDiscount) discounts += lineSum;
        if (isService)  servicesRevenue += lineSum;

        // —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if (!isDiscount && !isService) {
          const cost = Number(costByCode.get(String(it.code)) || 0);
          cogs += q * cost;

          // –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
          const key = String(it.code || it.name || "unknown");
          const prev = productProfit.get(key) || { name: it.name, revenue: 0, cogs: 0, profit: 0, qty: 0 };
          prev.revenue += lineSum;
          prev.cogs    += q * cost;
          prev.profit   = prev.revenue - prev.cogs;
          prev.qty     += q;
          prev.name     = it.name;
          productProfit.set(key, prev);
        }

        // –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π qty –∏–ª–∏ total (–µ—Å–ª–∏ —Ç–∞–∫ —É —Ç–µ–±—è –ø–∏—à–µ—Ç—Å—è)
        if ((q < 0) || (lineSum < 0 && !isDiscount)) {
          returns += Math.abs(lineSum);
        }
      }
    }

    const grossProfit = revenue - cogs;
    const grossMargin = revenue ? (grossProfit / revenue) : 0;
    const aov = orders ? (revenue / orders) : 0; // —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
    const topProducts = Array.from(productProfit.values())
      .sort((a,b) => b.profit - a.profit)
      .slice(0, 10);

    // —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞ (–Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç)
    let invCost = 0, invRetail = 0;
    for (const s of stocks) {
      const qty = Number(s.quantity) || 0;
      invCost   += qty * Number(s.price_seller || 0);
      invRetail += qty * Number(s.price || 0);
    }

    return {
      orders, itemsCnt, revenue, servicesRevenue, discounts, returns,
      cogs, grossProfit, grossMargin, aov, topProducts,
      invCost, invRetail,
      dailyExpense: Number(txSummary?.daily_expense || 0),
      monthlyExpense: Number(txSummary?.monthly_expense || 0),
    };
  }, [filteredSales, costByCode, stocks, txSummary]);

  return (
    <div className={styles.wrap}>
      <div className={styles.header}>
        <h2>üìä –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞</h2>

        <div className={styles.filters}>
          <div className={styles.periods}>
            {PERIODS.map(p => (
              <button
                key={p.key}
                className={`${styles.btn} ${styles.pill} ${period === p.key ? styles.active : ""}`}
                onClick={() => setPeriod(p.key)}
              >
                {p.label}
              </button>
            ))}
          </div>

          {period === "custom" && (
            <div className={styles.custom}>
              <label>
                –û—Ç
                <input
                  type="date"
                  value={from ? new Date(from).toISOString().slice(0,10) : ""}
                  onChange={e => setFrom(e.target.value ? new Date(e.target.value) : null)}
                />
              </label>
              <label>
                –î–æ
                <input
                  type="date"
                  value={to ? new Date(to).toISOString().slice(0,10) : ""}
                  onChange={e => setTo(e.target.value ? new Date(e.target.value) : null)}
                />
              </label>
            </div>
          )}
        </div>
      </div>

      {/* Cards row */}
      <div className={styles.cards}>
        <div className={styles.card}>
          <div className={styles.cardTitle}>–í—ã—Ä—É—á–∫–∞</div>
          <div className={styles.cardValue}>{fmtMoney(calc.revenue)} —Å–æ–º</div>
          <div className={styles.cardHint}>–ó–∞ –ø–µ—Ä–∏–æ–¥</div>
        </div>
        <div className={styles.card}>
          <div className={styles.cardTitle}>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (COGS)</div>
          <div className={styles.cardValue}>{fmtMoney(calc.cogs)} —Å–æ–º</div>
          <div className={styles.cardHint}>–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ price_seller</div>
        </div>
        <div className={styles.card}>
          <div className={styles.cardTitle}>–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å</div>
          <div className={styles.cardValue}>{fmtMoney(calc.grossProfit)} —Å–æ–º</div>
          <div className={styles.cardHint}>–ú–∞—Ä–∂–∞: {(calc.grossMargin*100).toFixed(1)}%</div>
        </div>
        <div className={styles.card}>
          <div className={styles.cardTitle}>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (AOV)</div>
          <div className={styles.cardValue}>{fmtMoney(calc.aov)} —Å–æ–º</div>
          <div className={styles.cardHint}>{calc.orders} –∑–∞–∫–∞–∑–æ–≤</div>
        </div>
      </div>

      {/* Breakdown */}
      <div className={styles.grid}>
        <div className={styles.panel}>
          <div className={styles.panelTitle}>–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏</div>
          <div className={styles.lines}>
            <div className={styles.line}><span>–¢–æ–≤–∞—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞</span><b>{fmtMoney(calc.revenue - calc.servicesRevenue - calc.discounts)} —Å–æ–º</b></div>
            <div className={styles.line}><span>–£—Å–ª—É–≥–∏</span><b>{fmtMoney(calc.servicesRevenue)} —Å–æ–º</b></div>
            <div className={styles.line}><span>–°–∫–∏–¥–∫–∏</span><b className={styles.red}>{fmtMoney(calc.discounts)} —Å–æ–º</b></div>
            <div className={styles.sep} />
            <div className={styles.line}><span>COGS</span><b>{fmtMoney(calc.cogs)} —Å–æ–º</b></div>
            <div className={styles.line}><span>–í–æ–∑–≤—Ä–∞—Ç—ã (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)</span><b>{fmtMoney(calc.returns)} —Å–æ–º</b></div>
          </div>
        </div>

        <div className={styles.panel}>
          <div className={styles.panelTitle}>–ó–∞—Ç—Ä–∞—Ç—ã –∏ –∑–∞–ø–∞—Å</div>
          <div className={styles.lines}>
            <div className={styles.line}><span>–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è</span><b>{fmtMoney(calc.dailyExpense)} —Å–æ–º</b></div>
            <div className={styles.line}><span>–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü</span><b>{fmtMoney(calc.monthlyExpense)} —Å–æ–º</b></div>
            <div className={styles.sep} />
            <div className={styles.line}><span>–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞ (–ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏)</span><b>{fmtMoney(calc.invCost)} —Å–æ–º</b></div>
            <div className={styles.line}><span>–†–æ–∑–Ω–∏—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞</span><b>{fmtMoney(calc.invRetail)} —Å–æ–º</b></div>
          </div>
        </div>
      </div>

      {/* Top products */}
      <div className={styles.panel}>
        <div className={styles.panelTitle}>–¢–û–ü SKU –ø–æ –ø—Ä–∏–±—ã–ª–∏</div>
        <div className={styles.tableWrap}>
          <table className={styles.table}>
            <thead>
              <tr>
                <th>–¢–æ–≤–∞—Ä</th>
                <th>–ö–æ–ª-–≤–æ</th>
                <th>–í—ã—Ä—É—á–∫–∞</th>
                <th>COGS</th>
                <th>–ü—Ä–∏–±—ã–ª—å</th>
                <th>–ú–∞—Ä–∂–∞</th>
              </tr>
            </thead>
            <tbody>
              {calc.topProducts.length === 0 && (
                <tr><td colSpan={6} className={styles.empty}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</td></tr>
              )}
              {calc.topProducts.map((p, i) => (
                <tr key={i}>
                  <td className={styles.left}>{p.name}</td>
                  <td>{p.qty}</td>
                  <td>{fmtMoney(p.revenue)}</td>
                  <td>{fmtMoney(p.cogs)}</td>
                  <td>{fmtMoney(p.profit)}</td>
                  <td>{p.revenue ? ((p.profit / p.revenue) * 100).toFixed(1) : "0.0"}%</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Raw orders table (–¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏) */}
      <div className={styles.panel}>
        <div className={styles.panelTitle}>–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥</div>
        <div className={styles.tableWrap}>
          <table className={styles.table}>
            <thead>
              <tr>
                <th>–î–∞—Ç–∞</th>
                <th>‚Ññ</th>
                <th>–ü–æ–∑–∏—Ü–∏–∏</th>
                <th>–í—ã—Ä—É—á–∫–∞</th>
              </tr>
            </thead>
            <tbody>
              {filteredSales.length === 0 && (
                <tr><td colSpan={4} className={styles.empty}>–ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –≤ –ø–µ—Ä–∏–æ–¥–µ</td></tr>
              )}
              {filteredSales.map((s) => (
                <tr key={s.id}>
                  <td>{(s.date || "").slice(0,19).replace("T"," ")}</td>
                  <td>{s.id}</td>
                  <td>{(s.items || []).reduce((q,i)=>q+(Number(i.quantity)||0),0)}</td>
                  <td>{fmtMoney(Number(s.total || 0))}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {loading && <div className={styles.loader}>–ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É‚Ä¶</div>}
    </div>
  );
}